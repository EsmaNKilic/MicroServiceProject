package com.kodlama.filterService.kafka.consumer.inventories;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

import com.kodlama.filterService.business.abstracts.CarFilterService;
import com.kodlama.filterService.entities.CarFilter;
import com.kodlamaio.common.events.inventories.InventoryCreatedEvent;
import com.kodlamaio.common.events.inventories.brand.BrandDeletedEvent;
import com.kodlamaio.common.events.inventories.brand.BrandUpdatedEvent;
import com.kodlamaio.common.events.inventories.car.CarDeletedEvent;
import com.kodlamaio.common.events.inventories.car.CarUpdatedEvent;
import com.kodlamaio.common.events.inventories.model.ModelDeletedEvent;
import com.kodlamaio.common.events.inventories.model.ModelUpdatedEvent;
import com.kodlamaio.common.events.rentals.CarRentalCreatedEvent;
import com.kodlamaio.common.events.rentals.CarRentalDeletedEvent;
import com.kodlamaio.common.events.rentals.CarRentalUpdatedEvent;
import com.kodlamaio.common.utilities.mapping.ModelMapperService;

@Service
public class InventoryConsumer {
	private static final Logger LOGGER = LoggerFactory.getLogger(InventoryConsumer.class);
    private final CarFilterService carFilterService;
    private final ModelMapperService modelMapperService;

    public InventoryConsumer(CarFilterService carFilterService, ModelMapperService modelMapperService) {
        this.carFilterService = carFilterService;
        this.modelMapperService = modelMapperService;
    }

    @KafkaListener(topics = "${spring.kafka.topic.name}", groupId = "inventory-create")
    
    public void consume(InventoryCreatedEvent event) {
    	
        CarFilter carFilter = modelMapperService.forRequest().map(event, CarFilter.class);
        
        carFilterService.save(carFilter);
        
        LOGGER.info("Inventory created event consumed: {}", event);
    }

    @KafkaListener(topics = "${spring.kafka.topic.name}", groupId = "car-delete")
    
    public void consume(CarDeletedEvent event) {
    	
    	carFilterService.delete(event.getCarId());
        
        LOGGER.info("Car deleted event consumed: {}", event);
    }

    @KafkaListener(topics = "${spring.kafka.topic.name}", groupId = "car-update")
    
    public void consume(CarUpdatedEvent event) {
    	
    	CarFilter carFilter = modelMapperService.forRequest().map(event, CarFilter.class);
        
        String id = carFilterService.getByCarId(event.getCarId()).getId();
        
        carFilter.setId(id);
        
        carFilterService.save(carFilter);
        
        LOGGER.info("Car updated event consumed: {}", event);
    }

    @KafkaListener(topics = "${spring.kafka.topic.name}", groupId = "brand-delete")
    
    public void consume(BrandDeletedEvent event) {
    	
    	carFilterService.deleteAllByBrandId(event.getBrandId());

        LOGGER.info("Brand deleted event consumed: {}", event);
    }

    @KafkaListener(topics = "${spring.kafka.topic.name}", groupId = "brand-update")
    
    public void consume(BrandUpdatedEvent event) {
    	
    	carFilterService.getByBrandId(event.getId()).forEach(
    			carFilter -> {carFilter.setBrandName(event.getName());
        
    	carFilterService.save(carFilter);
        });

        LOGGER.info("Brand updated event consumed: {}", event);
    }

    @KafkaListener(topics = "${spring.kafka.topic.name}", groupId = "model-delete")
    
    public void consume(ModelDeletedEvent event) {
    	
    	carFilterService.deleteAllByModelId(event.getModelId());

        LOGGER.info("Model deleted event consumed: {}", event);
    }

    @KafkaListener(topics = "${spring.kafka.topic.name}", groupId = "model-update")
    
    public void consume(ModelUpdatedEvent event) {
    	
    	carFilterService.getByModelId(event.getId()).forEach(filter -> {carFilter.setModelName(event.getName());
        
    	carFilter.setBrandId(event.getBrandId());
            
    	carFilter.setBrandName(carFilterService.getByBrandId(event.getBrandId()).get(0).getBrandName());
            
    	carFilterService.save(carFilter);
        });

        LOGGER.info("Model updated event consumed: {}", event);
    }

    @KafkaListener(topics = "${spring.kafka.topic.name}", groupId = "car-rental-create")
    
    public void consume(CarRentalCreatedEvent event) {
    	
    	CarFilter carFilter = carFilterService.getByCarId(event.getCarId());
        
    	carFilter.setState(CarState.RENTED);
        
        carFilterService.save(carFilter);

        LOGGER.info("Car rental created event consumed: {}", event);
    }

    @KafkaListener(topics = "${spring.kafka.topic.name}", groupId = "car-rental-update")
    
    public void consume(CarRentalUpdatedEvent event) {
    	
    	CarFilter oldCar = carFilterService.getByCarId(event.getOldCarId());
        
    	CarFilter newCar = carFilterService.getByCarId(event.getNewCarId());
        
        oldCar.setState(CarState.AVAILABLE); // 1 = Available 
        newCar.setState(CarState.RENTED); // 3 = Rented
        
        carFilterService.save(oldCar);
        carFilterService.save(newCar);

        LOGGER.info("Car rental updated event consumed: {}", event);
    }

    @KafkaListener(topics = "${spring.kafka.topic.name}", groupId = "car-rental-delete")
    
    public void consume(CarRentalDeletedEvent event) {
    	
    	CarFilter carFilter = carFilterService.getByCarId(event.getCarId());
        
    	carFilter.setState(CarState.AVAILABLE);
        
        carFilterService.save(carFilter);
        
        LOGGER.info("Car rental deleted event consumed: {}", event);
    }
}
