package com.kodlamaio.inventoryservice.business.concrete;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.kodlamaio.common.utilities.exceptions.BusinessException;
import com.kodlamaio.common.utilities.mapping.ModelMapperService;
import com.kodlamaio.inventoryservice.business.abstracts.BrandService;
import com.kodlamaio.inventoryservice.business.requests.Create.CreateBrandRequest;
import com.kodlamaio.inventoryservice.business.requests.Update.UpdateBrandRequest;
import com.kodlamaio.inventoryservice.business.responses.Create.CreateBrandResponse;
import com.kodlamaio.inventoryservice.business.responses.Get.GetBrandResponse;
import com.kodlamaio.inventoryservice.business.responses.Get.GetModelResponse;
import com.kodlamaio.inventoryservice.business.responses.GetAll.GetAllBrandResponse;
import com.kodlamaio.inventoryservice.business.responses.Update.UpdateBrandResponse;
import com.kodlamaio.inventoryservice.dataAccess.BrandRepository;
import com.kodlamaio.inventoryservice.entities.Brand;
import com.kodlamaio.inventoryservice.entities.Model;

import lombok.AllArgsConstructor;

@AllArgsConstructor
@Service
public class BrandManager implements BrandService {
	
	private BrandRepository brandRepository;
	private ModelMapperService modelMapperService;

	@Override
	public List<GetAllBrandResponse> getAll() {
		List<Brand> brands =  this.brandRepository.findAll();
		
		List<GetAllBrandResponse> response = brands.stream()
				.map(brand->this.modelMapperService.forResponse()
				.map(brand, GetAllBrandResponse.class)).collect(Collectors.toList());
		
		return response;
	}
	
	
	@Override
	public GetBrandResponse getById(String id) {
		
		Brand brand = this.brandRepository.findById(id).get();
		
		GetBrandResponse response = this.modelMapperService.forResponse().map(brand, GetBrandResponse.class);
		
		return response;
	}

	
	
	@Override
	public CreateBrandResponse add(CreateBrandRequest createBrandRequest) { 
		
		checkIfBrandExistsByName(createBrandRequest.getName());
		
		Brand brand = this.modelMapperService.forRequest()
				.map(createBrandRequest, Brand.class);
		brand.setId(UUID.randomUUID().toString());
		
		this.brandRepository.save(brand);
		
		CreateBrandResponse createBrandResponse = this.modelMapperService.forResponse()
				.map(brand, CreateBrandResponse.class);
		
		return createBrandResponse;
	}
	
	
	@Override
	public UpdateBrandResponse update(UpdateBrandRequest updateBrandRequest, String id) {

		checkIfBrandExistsByName(updateBrandRequest.getName());
		checkIfBrandExistById(id);
		
		Brand brand = this.modelMapperService.forRequest()
				.map(updateBrandRequest, Brand.class);
		brand.setId(UUID.randomUUID().toString());
		
		this.brandRepository.save(brand);
		
		UpdateBrandResponse updateBrandResponse = this.modelMapperService.forResponse()
				.map(brand, UpdateBrandResponse.class);
		
		return updateBrandResponse;
	}


	@Override
	public void delete(String id) {
		
		checkIfBrandExistById(id);
		
		this.brandRepository.deleteById(id);
		
		//
	}
	
	
	@Override
	public void checkIfBrandExistById(String id) {
		
		//if (!this.brandRepository.existsById(id)) {
			
			//throw new ;
	}
	
	
	private void checkIfBrandExistsByName(String name) {
		Brand currentBrand = this.brandRepository.findByName(name);
		if(currentBrand!=null) {
		    throw new BusinessException("BRAND.EXISTS");
		}
	}


	

}
