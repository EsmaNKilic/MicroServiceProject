package com.kodlamaio.inventoryservice.kafka.consumer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

import com.kodlamaio.common.events.rentals.RentalCreatedEvent;
import com.kodlamaio.common.events.rentals.RentalDeletedEvent;
import com.kodlamaio.common.events.rentals.RentalUpdatedEvent;
import com.kodlamaio.inventoryservice.business.abstracts.CarService;
import com.kodlamaio.inventoryservice.kafka.producer.inventories.InventoryProducer;

@Service
public class RentalConsumer {
private static final Logger LOGGER = LoggerFactory.getLogger(RentalConsumer.class);
	
	private final CarService carService;
	private final InventoryProducer inventoryProducer;
	
	public RentalConsumer(CarService carService, InventoryProducer inventoryProducer) {
		
	    this.carService = carService;
	    this.inventoryProducer = inventoryProducer;
	}
	
	@KafkaListener (topics = "${spring.kafka.topic.name}", groupId = "${spring.kafka.consumer.group-id}")
	
	public void consume(RentalCreatedEvent event) {
		
		carService.updateCarState(3); 
		event.getCarId();
		
		LOGGER.info(String.format("Order event received in stock service => %s", event.toString()));
		
		// save the order event into the database
	}
	
	@KafkaListener (topics = "${spring.kafka.topic.name}", groupId = "${spring.kafka.consumer.group-id2}")
	
	public void consume(RentalUpdatedEvent event) {
		
		carService.updateCarState(1);
		event.getOldCarId();
	    carService.updateCarState(3); 
	    event.getNewCarId();
		
		LOGGER.info(String.format("Order event received in stock service => %s", event.toString()));
			
	}
	
	@KafkaListener (topics = "${spring.kafka.topic.name}", groupId = "${spring.kafka.consumer.group-id3}")
	
	public void consume(RentalDeletedEvent event) {
		
		carService.updateCarState(1); 
		event.getCarId();
		
		LOGGER.info(String.format("Order event received in stock service => %s", event.toString()));
		
	}
}
