package com.kodlama.invoiceService.business.concretes;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.kodlama.invoiceService.business.abstracts.InvoiceService;
import com.kodlama.invoiceService.business.requests.CreateInvoiceRequest;
import com.kodlama.invoiceService.business.requests.UpdateInvoiceRequest;
import com.kodlama.invoiceService.business.responses.CreateInvoiceResponse;
import com.kodlama.invoiceService.business.responses.GetAllInvoiceResponse;
import com.kodlama.invoiceService.business.responses.GetInvoiceResponse;
import com.kodlama.invoiceService.business.responses.UpdateInvoiceResponse;
import com.kodlama.invoiceService.dataAccess.InvoiceRepository;
import com.kodlama.invoiceService.entities.Invoice;
import com.kodlamaio.common.utilities.exceptions.BusinessException;
import com.kodlamaio.common.utilities.mapping.ModelMapperService;

import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class InvoiceManager implements InvoiceService{

	private InvoiceRepository invoiceRepository;
	private ModelMapperService modelMapperService;
	
	@Override
	public List<GetAllInvoiceResponse> getAll() {
		
		List<Invoice> invoices = this.invoiceRepository.findAll();
		
		List<GetAllInvoiceResponse>  response = invoices.stream()
				.map(invoice->this.modelMapperService.forResponse()
				.map(invoice, GetAllInvoiceResponse.class)).collect(Collectors.toList());
		
		return response;
	}

	@Override
	public GetInvoiceResponse getById(String id) {
		
		Invoice invoice = this.invoiceRepository.findById(id).get();
		
		GetInvoiceResponse response = this.modelMapperService.forResponse()
				.map(invoice, GetInvoiceResponse.class);
		
		return response;
	}

	@Override
	public CreateInvoiceResponse add(CreateInvoiceRequest createInvoiceRequest) {
		
		Invoice invoice = this.modelMapperService.forRequest()
				.map(createInvoiceRequest, Invoice.class);
		
		invoice.setId(UUID.randomUUID().toString());
		
		this.invoiceRepository.save(invoice);
		
		CreateInvoiceResponse createInvoiceResponse = this.modelMapperService.forResponse()
				.map(invoice, CreateInvoiceResponse.class);
		
		return createInvoiceResponse;
	}

	@Override
	public UpdateInvoiceResponse update(UpdateInvoiceRequest updateInvoiceRequest) {
		
		Invoice invoice = this.modelMapperService.forRequest()
				.map(updateInvoiceRequest, Invoice.class);
		
		invoice.setId(updateInvoiceRequest.getId());
		
		this.invoiceRepository.save(invoice);
		
		UpdateInvoiceResponse updateInvoiceResponse = this.modelMapperService.forResponse()
				.map(invoice, UpdateInvoiceResponse.class);
		
		return updateInvoiceResponse;
	}

	@Override
	public void delete(String id) {
		
		this.invoiceRepository.deleteById(id);
		
	}
	
	
	
	// CONTROLS
	
	
	private void checkIfInvoiceExists(String id) {
		
		if(!this.invoiceRepository.existsById(id)) {
			
			throw new BusinessException("INVOICE NOT EXISTS");
			
		}
	}

}
