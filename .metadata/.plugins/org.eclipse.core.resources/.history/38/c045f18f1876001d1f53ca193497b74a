package com.kodlama.rentalService.business.concretes;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.kodlama.rentalService.business.abstracts.RentalService;
import com.kodlama.rentalService.business.requests.CreateRentalRequest;
import com.kodlama.rentalService.business.requests.UpdateRentalRequest;
import com.kodlama.rentalService.business.response.CreateRentalResponse;
import com.kodlama.rentalService.business.response.GetAllRentalResponse;
import com.kodlama.rentalService.business.response.GetRentalResponse;
import com.kodlama.rentalService.business.response.UpdateRentalResponse;
import com.kodlama.rentalService.client.CarClient;
import com.kodlama.rentalService.client.PaymentClient;
import com.kodlama.rentalService.dataAccess.RentalRepository;
import com.kodlama.rentalService.entities.Rental;
import com.kodlama.rentalService.kafka.RentalProducer;
import com.kodlamaio.common.events.rentals.RentalCreatedEvent;
import com.kodlamaio.common.events.rentals.RentalUpdatedEvent;
import com.kodlamaio.common.utilities.exceptions.BusinessException;
import com.kodlamaio.common.utilities.mapping.ModelMapperService;

import lombok.AllArgsConstructor;

@AllArgsConstructor
@Service
public class RentalManager implements RentalService {

	private RentalRepository rentalRepository;
	private ModelMapperService modelMapperService;
	private RentalProducer rentalProducer;
	private CarClient carClient;
	private PaymentClient paymentClient;
	
	@Override
	public List<GetAllRentalResponse> getAll() {
		
		List<Rental> rentals = this.rentalRepository.findAll();
		
		List<GetAllRentalResponse> response = rentals.stream()
				.map(rental->this.modelMapperService.forResponse()
				.map(rental, GetAllRentalResponse.class)).collect(Collectors.toList());
				
		return response;
	}


	@Override
	public GetRentalResponse getById(String id) {
		
		checkIfRentalExistsById(id);
		
		Rental rental = this.rentalRepository.findById(id).get();
		
		GetRentalResponse response = this.modelMapperService.forResponse().map(rental, GetRentalResponse.class);
		
		return response;
	}
	
	
	@Override
	public CreateRentalResponse add(CreateRentalRequest createRentalRequest) {
		
		carClient.checkIfCarAvailable(createRentalRequest.getCarId());
		
		Rental rental = this.modelMapperService.forRequest()
				.map(createRentalRequest, Rental.class);
				
		rental.setId(UUID.randomUUID().toString());
		rental.setDateStarted(LocalDateTime.now());
		double totalPrice= createRentalRequest.getDailyPrice() * createRentalRequest.getRentedForDays();
		rental.setTotalPrice(totalPrice);
		
		/*paymentClient.checkIfPaymentSuccessful(paymentRequest.getCardNumber(),
                paymentRequest.getFullName(),
                paymentRequest.getCardExpirationYear(),
                paymentRequest.getCardExpirationMonth(),
                paymentRequest.getCardCvv(),
                totalPrice);*/
		
		this.rentalRepository.save(rental);
		
		RentalCreatedEvent rentalCreatedEvent = new RentalCreatedEvent();
		rentalCreatedEvent.setCarId(rentalCreatedEvent.getCarId()); 
		rentalCreatedEvent.setMessage("Rental Created");
		
		this.rentalProducer.sendMessage(rentalCreatedEvent);
		
		/*PaymentReceiveEvent paymentReceivedEvent = new PaymentReceiveEvent();
	        paymentReceivedEvent.setCarId(rental.getCarId());
	        paymentReceivedEvent.setFullName(paymentRequest.getFullName());
	        paymentReceivedEvent.setDailyPrice(request.getDailyPrice());
	        paymentReceivedEvent.setTotalPrice(totalPrice);
	        paymentReceivedEvent.setRentedForDays(request.getRentedForDays());
	        paymentReceivedEvent.setRentedAt(rental.getDateStarted());
	        rentalProducer.sendMessage(paymentReceivedEvent);*/
		
		CreateRentalResponse createRentalResponse = this.modelMapperService.forResponse()
				.map(rental, CreateRentalResponse.class);
		
		return createRentalResponse;
	}
	
	
	@Override
	public UpdateRentalResponse update(UpdateRentalRequest updateRentalRequest) {
		
		checkIfRentalExistsById(updateRentalRequest.getId());
		
		//carClient.checkIfCarIsAvailable(updateRentalRequest.getCarId());

		RentalUpdatedEvent rentalUpdatedEvent = new RentalUpdatedEvent();
		
		Rental rental = this.modelMapperService.forRequest()
				.map(updateRentalRequest, Rental.class);
				
		rental.setId(updateRentalRequest.getId());
	
		rentalUpdatedEvent.setOldCarId(rentalRepository.findById(id).orElseThrow().getCarId());
		
		this.rentalRepository.save(rental);
		
        rentalUpdatedEvent.setNewCarId(rental.getCarId());
        rentalUpdatedEvent.setMessage("Rental Updated");
        this.rentalProducer.sendMessage(rentalUpdatedEvent);
		
		UpdateRentalResponse updateRentalResponse = this.modelMapperService.forResponse()
				.map(rental, UpdateRentalResponse.class);
		
		return updateRentalResponse;
	}
	
	
	@Override
	public void delete(String id) {
		
		checkIfRentalExistsById(id);
		
		this.rentalRepository.deleteById(id);	
	}

	
	// CONTROLS

	
	private void checkIfRentalExistsById(String id) {
		
		if(!this.rentalRepository.existsById(id)) {
			
			throw new BusinessException("RENTAL NOT EXISTS");
		}
		
	}

}
