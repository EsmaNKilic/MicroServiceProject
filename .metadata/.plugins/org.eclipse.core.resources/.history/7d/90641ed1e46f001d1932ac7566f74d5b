package com.kodlamaio.inventoryservice.business.concrete;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import com.kodlamaio.common.utilities.exceptions.BusinessException;
import com.kodlamaio.common.utilities.mapping.ModelMapperService;
import com.kodlamaio.inventoryservice.business.abstracts.CarService;
import com.kodlamaio.inventoryservice.business.requests.CreateCarRequest;
import com.kodlamaio.inventoryservice.business.requests.Update.UpdateCarRequest;
import com.kodlamaio.inventoryservice.business.responses.Create.CreateCarResponse;
import com.kodlamaio.inventoryservice.business.responses.GetAll.GetAllCarResponse;
import com.kodlamaio.inventoryservice.business.responses.Update.UpdateCarResponse;
import com.kodlamaio.inventoryservice.dataAccess.CarRepository;
import com.kodlamaio.inventoryservice.entities.Car;

public class CarManager implements CarService {

	private CarRepository carRepository;
	private ModelMapperService modelMapperService;
	
	@Override
	public List<GetAllCarResponse> getAll() {
		List<Car> cars =  this.carRepository.findAll();
		
		List<GetAllCarResponse> response = cars.stream()
				.map(car->this.modelMapperService.forResponse()
				.map(car, GetAllCarResponse.class)).collect(Collectors.toList());
		
		return response;
	}

	
	@Override
	public CreateCarResponse add(CreateCarRequest createCarRequest) {
		
		checkIfCarExistsByName(createCarRequest.getPlate());
		
		Car car = this.modelMapperService.forRequest()
				.map(createCarRequest, Car.class);
		car.setId(UUID.randomUUID().toString());
		
		this.carRepository.save(car);
		
		CreateCarResponse createCarResponse = this.modelMapperService.forResponse()
				.map(car, CreateCarResponse.class);
		
		return createCarResponse;
	}
	
	
	@Override
	public UpdateCarResponse update(UpdateCarRequest updateCarRequest) {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public void delete(int id) {
		// TODO Auto-generated method stub
		
	}
	
	
	private void checkIfCarExistsByName(String name) {
		Car currentCar = this.carRepository.findByName(name);
		if(currentCar!=null) {
		    throw new BusinessException("CAR.EXISTS");
		}
	}



}
