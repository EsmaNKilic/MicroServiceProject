package com.kodlama.filterService.business.concretes;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.kodlama.filterService.business.abstracts.CarFilterService;
import com.kodlama.filterService.business.responses.GetAllFilterResponse;
import com.kodlama.filterService.dataAccess.CarFilterRepository;
import com.kodlama.filterService.entities.CarFilter;
import com.kodlamaio.common.utilities.mapping.ModelMapperService;

import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class CarFilterManager implements CarFilterService{

	 private  CarFilterRepository carFilterRepository;
	 private  ModelMapperService modelMapperService;

	    @Override
	    public List<GetAllFilterResponse> getAll() {
	    	
	        List<CarFilter> filters = carFilterRepository.findAll();
	        
	        List<GetAllFilterResponse> response = filters.stream()
	                .map(carFilter -> modelMapperService.forResponse()
	                .map(carFilter, GetAllFilterResponse.class)).collect(Collectors.toList());

	        return response;
	    }

	    @Override
	    public List<GetAllFilterResponse> getByBrandName(String carBrandName) {
	    	
	        List<CarFilter> filters = carFilterRepository.findByBrandNameIgnoreCase(carBrandName);
	        
	        List<GetAllFilterResponse> response = filters.stream()
	                .map(carFilter -> modelMapperService.forResponse()
	                .map(carFilter, GetAllFilterResponse.class)).collect(Collectors.toList());

	        return response;
	    }

	    @Override
	    public List<GetAllFilterResponse> getByModelName(String carModelName) {
	    	
	        List<CarFilter> filters = carFilterRepository.findByModelNameIgnoreCase(carModelName);
	        
	        List<GetAllFilterResponse> response = filters.stream()
	                .map(carFilter -> modelMapperService.forResponse()
	                .map(carFilter, GetAllFilterResponse.class)).collect(Collectors.toList());

	        return response;
	    }

	    @Override
	    public List<GetAllFilterResponse> getByPlate(String carPlate) {
	    	
	        List<CarFilter> filters = carFilterRepository.findByPlateIgnoreCase(carPlate);
	        
	        List<GetAllFilterResponse> response = filters.stream()
	                .map(filter -> modelMapperService.forResponse()
	                .map(filter, GetAllFilterResponse.class)).collect(Collectors.toList());

	        return response;
	    }

	    @Override
	    public List<GetAllFilterResponse> searchByPlate(String carPlate) {
	    	
	        List<CarFilter> filters = carFilterRepository.findByPlateContainingIgnoreCase(carPlate);
	        
	        List<GetAllFilterResponse> response = filters.stream()
	                .map(filter -> modelMapperService.forResponse()
	                .map(filter, GetAllFilterResponse.class)).collect(Collectors.toList());

	        return response;
	    }

	    @Override
	    public List<GetAllFilterResponse> searchByBrandName(String carBrandName) {
	    	
	        List<CarFilter> filters = carFilterRepository.findByBrandNameContainingIgnoreCase(carBrandName);
	        
	        List<GetAllFilterResponse> response = filters.stream()
	                .map(filter -> modelMapperService.forResponse()
	                .map(filter, GetAllFilterResponse.class)).collect(Collectors.toList());

	        return response;
	    }

	    @Override
	    public List<GetAllFilterResponse> searchByModelName(String carModelName) {
	    	
	        List<CarFilter> filters = carFilterRepository.findByModelNameContainingIgnoreCase(carModelName);
	        
	        List<GetAllFilterResponse> response = filters.stream()
	                .map(filter -> modelMapperService.forResponse()
	                .map(filter, GetAllFilterResponse.class)).collect(Collectors.toList());

	        return response;
	    }

	    @Override
	    public List<GetAllFilterResponse> getByModelYear(int carModelYear) {
	    	
	        List<CarFilter> filters = carFilterRepository.findByModelYear(carModelYear);
	        
	        List<GetAllFilterResponse> response = filters.stream()
	                .map(filter -> modelMapperService.forResponse()
	                .map(filter, GetAllFilterResponse.class)).collect(Collectors.toList());

	        return response;
	    }

	    @Override
	    public List<GetAllFilterResponse> getByState(int carState) {
	    	
	        List<CarFilter> filters = carFilterRepository.findByState(carState);
	        
	        List<GetAllFilterResponse> response = filters.stream()
	                .map(filter -> modelMapperService.forResponse()
	                .map(filter, GetAllFilterResponse.class)).collect(Collectors.toList());

	        return response;
	    }

	    @Override
	    public CarFilter getByCarId(String id) {
	        return carFilterRepository.findByCarId(id);
	    }

	    @Override
	    public List<CarFilter> getByModelId(String carModelId) {
	        return carFilterRepository.findByModelId(carModelId);
	    }

	    @Override
	    public List<CarFilter> getByBrandId(String carBrandId) {
	        return carFilterRepository.findByBrandId(carBrandId);
	    }

	    @Override
	    public void save(CarFilter carFilter) {
	    	carFilterRepository.save(carFilter);
	    }

	    @Override
	    public void delete(String id) {
	    	carFilterRepository.deleteByCarId(id);
	    }

	    @Override
	    public void deleteAllByBrandId(String carBrandId) {
	    	carFilterRepository.deleteAllByBrandId(carBrandId);
	    }

	    @Override
	    public void deleteAllByModelId(String carModelId) {
	    	carFilterRepository.deleteAllByModelId(carModelId);
	    }
	    
	    private void checkIfExistByPlate(String carPlate) {
	        if (!carFilterRepository.existsByPlate(carPlate)) {
	            throw new RuntimeException("Filter Not Exists");
	        }
}
